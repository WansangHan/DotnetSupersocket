// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferTest
{

    using global::System;
    using Google.FlatBuffers;

    public struct TestStruct : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static TestStruct GetRootAsTestStruct(ByteBuffer _bb) { return GetRootAsTestStruct(_bb, new TestStruct()); }
        public static TestStruct GetRootAsTestStruct(ByteBuffer _bb, TestStruct obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public TestStruct __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
        public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }

        public static Offset<TestStruct> CreateTestStruct(FlatBufferBuilder builder,
            StringOffset NameOffset = default(StringOffset))
        {
            builder.StartObject(1);
            TestStruct.AddName(builder, NameOffset);
            return TestStruct.EndTestStruct(builder);
        }

        public static void StartTestStruct(FlatBufferBuilder builder) { builder.StartObject(1); }
        public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(0, NameOffset.Value, 0); }
        public static Offset<TestStruct> EndTestStruct(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<TestStruct>(o);
        }
    };


}
